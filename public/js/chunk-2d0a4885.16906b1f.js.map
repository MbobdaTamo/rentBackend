{"version":3,"sources":["webpack:///../../src/web.ts"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","WebPlugin","constructor","DB_VERSION","DB_NAME","_writeCmds","undefined","this","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","keyPath","createIndex","cmd","args","readFlag","indexOf","initDb","then","conn","tx","transaction","objectStore","req","indexName","getPath","directory","uriPath","cleanedUriPath","replace","fsPath","clear","options","entry","dbRequest","Error","data","content","encoding","doRecursive","recursive","occupiedEntry","type","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","uri","btoa","atob","entries","dbIndexRequest","IDBKeyRange","only","depth","match","fullPath","readDirResult","readdir","files","entryPath","name","entryObj","stat","deleteFile","rmdir","all","map","async","subEntry","e","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","file","readFile","Encoding","UTF8","writeResult","writeFile","contents","filename","str","err"],"mappings":"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","file":"js/chunk-2d0a4885.16906b1f.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  AppendFileOptions,\n  CopyOptions,\n  CopyResult,\n  DeleteFileOptions,\n  FilesystemPlugin,\n  GetUriOptions,\n  GetUriResult,\n  MkdirOptions,\n  PermissionStatus,\n  ReadFileOptions,\n  ReadFileResult,\n  ReaddirOptions,\n  ReaddirResult,\n  RenameOptions,\n  RmdirOptions,\n  StatOptions,\n  StatResult,\n  WriteFileOptions,\n  WriteFileResult,\n  Directory,\n} from './definitions';\nimport { Encoding } from './definitions';\n\nfunction resolve(path: string): string {\n  const posix = path.split('/').filter(item => item !== '.');\n  const newPosix: string[] = [];\n\n  posix.forEach(item => {\n    if (\n      item === '..' &&\n      newPosix.length > 0 &&\n      newPosix[newPosix.length - 1] !== '..'\n    ) {\n      newPosix.pop();\n    } else {\n      newPosix.push(item);\n    }\n  });\n\n  return newPosix.join('/');\n}\nfunction isPathParent(parent: string, children: string): boolean {\n  parent = resolve(parent);\n  children = resolve(children);\n  const pathsA = parent.split('/');\n  const pathsB = children.split('/');\n\n  return (\n    parent !== children &&\n    pathsA.every((value, index) => value === pathsB[index])\n  );\n}\n\nexport class FilesystemWeb extends WebPlugin implements FilesystemPlugin {\n  DB_VERSION = 1;\n  DB_NAME = 'Disc';\n\n  private _writeCmds: string[] = ['add', 'put', 'delete'];\n  private _db?: IDBDatabase;\n  static _debug = true;\n  async initDb(): Promise<IDBDatabase> {\n    if (this._db !== undefined) {\n      return this._db;\n    }\n    if (!('indexedDB' in window)) {\n      throw this.unavailable(\"This browser doesn't support IndexedDB\");\n    }\n\n    return new Promise<IDBDatabase>((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n      request.onupgradeneeded = FilesystemWeb.doUpgrade;\n      request.onsuccess = () => {\n        this._db = request.result;\n        resolve(request.result);\n      };\n      request.onerror = () => reject(request.error);\n      request.onblocked = () => {\n        console.warn('db blocked');\n      };\n    });\n  }\n\n  static doUpgrade(event: IDBVersionChangeEvent): void {\n    const eventTarget = event.target as IDBOpenDBRequest;\n    const db = eventTarget.result;\n    switch (event.oldVersion) {\n      case 0:\n      case 1:\n      default: {\n        if (db.objectStoreNames.contains('FileStorage')) {\n          db.deleteObjectStore('FileStorage');\n        }\n        const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n        store.createIndex('by_folder', 'folder');\n      }\n    }\n  }\n\n  async dbRequest(cmd: string, args: any[]): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: any = tx.objectStore('FileStorage');\n        const req = store[cmd](...args);\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  async dbIndexRequest(\n    indexName: string,\n    cmd: string,\n    args: [any],\n  ): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: IDBObjectStore = tx.objectStore('FileStorage');\n        const index: any = store.index(indexName);\n        const req = index[cmd](...args) as any;\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  private getPath(\n    directory: Directory | undefined,\n    uriPath: string | undefined,\n  ): string {\n    const cleanedUriPath =\n      uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n    let fsPath = '';\n    if (directory !== undefined) fsPath += '/' + directory;\n    if (uriPath !== '') fsPath += '/' + cleanedUriPath;\n    return fsPath;\n  }\n\n  async clear(): Promise<void> {\n    const conn: IDBDatabase = await this.initDb();\n    const tx: IDBTransaction = conn.transaction(['FileStorage'], 'readwrite');\n    const store: IDBObjectStore = tx.objectStore('FileStorage');\n    store.clear();\n  }\n\n  /**\n   * Read a file from disk\n   * @param options options for the file read\n   * @return a promise that resolves with the read file data result\n   */\n  async readFile(options: ReadFileOptions): Promise<ReadFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    // const encoding = options.encoding;\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    return { data: entry.content ? entry.content : '' };\n  }\n\n  /**\n   * Write a file to disk in the specified location on device\n   * @param options options for the file write\n   * @return a promise that resolves with the file write result\n   */\n  async writeFile(options: WriteFileOptions): Promise<WriteFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const doRecursive = options.recursive;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: doRecursive,\n        });\n      }\n    }\n\n    if (!encoding) {\n      data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n      if (!this.isBase64String(data))\n        throw Error('The supplied data is not valid base64 content.');\n    }\n\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: now,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n    return {\n      uri: pathObj.path,\n    };\n  }\n\n  /**\n   * Append to a file on disk in the specified location on device\n   * @param options options for the file append\n   * @return a promise that resolves with the file write result\n   */\n  async appendFile(options: AppendFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const now = Date.now();\n    let ctime = now;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: true,\n        });\n      }\n    }\n\n    if (!encoding && !this.isBase64String(data))\n      throw Error('The supplied data is not valid base64 content.');\n\n    if (occupiedEntry !== undefined) {\n      if (occupiedEntry.content !== undefined && !encoding) {\n        data = btoa(atob(occupiedEntry.content) + atob(data));\n      } else {\n        data = occupiedEntry.content + data;\n      }\n      ctime = occupiedEntry.ctime;\n    }\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: ctime,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Delete a file from disk\n   * @param options options for the file delete\n   * @return a promise that resolves with the deleted file data result\n   */\n  async deleteFile(options: DeleteFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n      IDBKeyRange.only(path),\n    ]);\n    if (entries.length !== 0) throw Error('Folder is not empty.');\n\n    await this.dbRequest('delete', [path]);\n  }\n\n  /**\n   * Create a directory.\n   * @param options options for the mkdir\n   * @return a promise that resolves with the mkdir result\n   */\n  async mkdir(options: MkdirOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    const doRecursive = options.recursive;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const depth = (path.match(/\\//g) || []).length;\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (depth === 1) throw Error('Cannot create Root directory');\n    if (occupiedEntry !== undefined)\n      throw Error('Current directory does already exist.');\n    if (!doRecursive && depth !== 2 && parentEntry === undefined)\n      throw Error('Parent directory must exist');\n\n    if (doRecursive && depth !== 2 && parentEntry === undefined) {\n      const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n      await this.mkdir({\n        path: parentArgPath,\n        directory: options.directory,\n        recursive: doRecursive,\n      });\n    }\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'directory',\n      size: 0,\n      ctime: now,\n      mtime: now,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Remove a directory\n   * @param options the options for the directory remove\n   */\n  async rmdir(options: RmdirOptions): Promise<void> {\n    const { path, directory, recursive } = options;\n    const fullPath: string = this.getPath(directory, path);\n\n    const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n\n    if (entry === undefined) throw Error('Folder does not exist.');\n\n    if (entry.type !== 'directory')\n      throw Error('Requested path is not a directory');\n\n    const readDirResult = await this.readdir({ path, directory });\n\n    if (readDirResult.files.length !== 0 && !recursive)\n      throw Error('Folder is not empty');\n\n    for (const entry of readDirResult.files) {\n      const entryPath = `${path}/${entry.name}`;\n      const entryObj = await this.stat({ path: entryPath, directory });\n      if (entryObj.type === 'file') {\n        await this.deleteFile({ path: entryPath, directory });\n      } else {\n        await this.rmdir({ path: entryPath, directory, recursive });\n      }\n    }\n\n    await this.dbRequest('delete', [fullPath]);\n  }\n\n  /**\n   * Return a list of files from the directory (not recursive)\n   * @param options the options for the readdir operation\n   * @return a promise that resolves with the readdir directory listing result\n   */\n  async readdir(options: ReaddirOptions): Promise<ReaddirResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (options.path !== '' && entry === undefined)\n      throw Error('Folder does not exist.');\n\n    const entries: string[] = await this.dbIndexRequest(\n      'by_folder',\n      'getAllKeys',\n      [IDBKeyRange.only(path)],\n    );\n    const files = await Promise.all(\n      entries.map(async e => {\n        let subEntry = (await this.dbRequest('get', [e])) as EntryObj;\n        if (subEntry === undefined) {\n          subEntry = (await this.dbRequest('get', [e + '/'])) as EntryObj;\n        }\n        return {\n          name: e.substring(path.length + 1),\n          type: subEntry.type,\n          size: subEntry.size,\n          ctime: subEntry.ctime,\n          mtime: subEntry.mtime,\n          uri: subEntry.path,\n        };\n      }),\n    );\n    return { files: files };\n  }\n\n  /**\n   * Return full File URI for a path and directory\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async getUri(options: GetUriOptions): Promise<GetUriResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    return {\n      uri: entry?.path || path,\n    };\n  }\n\n  /**\n   * Return data about a file\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async stat(options: StatOptions): Promise<StatResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    if (entry === undefined) throw Error('Entry does not exist.');\n\n    return {\n      type: entry.type,\n      size: entry.size,\n      ctime: entry.ctime,\n      mtime: entry.mtime,\n      uri: entry.path,\n    };\n  }\n\n  /**\n   * Rename a file or directory\n   * @param options the options for the rename operation\n   * @return a promise that resolves with the rename result\n   */\n  async rename(options: RenameOptions): Promise<void> {\n    await this._copy(options, true);\n    return;\n  }\n\n  /**\n   * Copy a file or directory\n   * @param options the options for the copy operation\n   * @return a promise that resolves with the copy result\n   */\n  async copy(options: CopyOptions): Promise<CopyResult> {\n    return this._copy(options, false);\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  /**\n   * Function that can perform a copy or a rename\n   * @param options the options for the rename operation\n   * @param doRename whether to perform a rename or copy operation\n   * @return a promise that resolves with the result\n   */\n  private async _copy(\n    options: CopyOptions,\n    doRename = false,\n  ): Promise<CopyResult> {\n    let { toDirectory } = options;\n    const { to, from, directory: fromDirectory } = options;\n\n    if (!to || !from) {\n      throw Error('Both to and from must be provided');\n    }\n\n    // If no \"to\" directory is provided, use the \"from\" directory\n    if (!toDirectory) {\n      toDirectory = fromDirectory;\n    }\n\n    const fromPath = this.getPath(fromDirectory, from);\n    const toPath = this.getPath(toDirectory, to);\n\n    // Test that the \"to\" and \"from\" locations are different\n    if (fromPath === toPath) {\n      return {\n        uri: toPath,\n      };\n    }\n\n    if (isPathParent(fromPath, toPath)) {\n      throw Error('To path cannot contain the from path');\n    }\n\n    // Check the state of the \"to\" location\n    let toObj;\n    try {\n      toObj = await this.stat({\n        path: to,\n        directory: toDirectory,\n      });\n    } catch (e) {\n      // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n      const toPathComponents = to.split('/');\n      toPathComponents.pop();\n      const toPath = toPathComponents.join('/');\n\n      // Check the containing directory of the \"to\" location exists\n      if (toPathComponents.length > 0) {\n        const toParentDirectory = await this.stat({\n          path: toPath,\n          directory: toDirectory,\n        });\n\n        if (toParentDirectory.type !== 'directory') {\n          throw new Error('Parent directory of the to path is a file');\n        }\n      }\n    }\n\n    // Cannot overwrite a directory\n    if (toObj && toObj.type === 'directory') {\n      throw new Error('Cannot overwrite a directory with a file');\n    }\n\n    // Ensure the \"from\" object exists\n    const fromObj = await this.stat({\n      path: from,\n      directory: fromDirectory,\n    });\n\n    // Set the mtime/ctime of the supplied path\n    const updateTime = async (path: string, ctime: number, mtime: number) => {\n      const fullPath: string = this.getPath(toDirectory, path);\n      const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n      entry.ctime = ctime;\n      entry.mtime = mtime;\n      await this.dbRequest('put', [entry]);\n    };\n\n    const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n\n    switch (fromObj.type) {\n      // The \"from\" object is a file\n      case 'file': {\n        // Read the file\n        const file = await this.readFile({\n          path: from,\n          directory: fromDirectory,\n        });\n\n        // Optionally remove the file\n        if (doRename) {\n          await this.deleteFile({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n\n        let encoding;\n        if (!this.isBase64String(file.data)) {\n          encoding = Encoding.UTF8;\n        }\n\n        // Write the file to the new location\n        const writeResult = await this.writeFile({\n          path: to,\n          directory: toDirectory,\n          data: file.data,\n          encoding: encoding,\n        });\n\n        // Copy the mtime/ctime of a renamed file\n        if (doRename) {\n          await updateTime(to, ctime, fromObj.mtime);\n        }\n\n        // Resolve promise\n        return writeResult;\n      }\n      case 'directory': {\n        if (toObj) {\n          throw Error('Cannot move a directory over an existing object');\n        }\n\n        try {\n          // Create the to directory\n          await this.mkdir({\n            path: to,\n            directory: toDirectory,\n            recursive: false,\n          });\n\n          // Copy the mtime/ctime of a renamed directory\n          if (doRename) {\n            await updateTime(to, ctime, fromObj.mtime);\n          }\n        } catch (e) {\n          // ignore\n        }\n\n        // Iterate over the contents of the from location\n        const contents = (\n          await this.readdir({\n            path: from,\n            directory: fromDirectory,\n          })\n        ).files;\n\n        for (const filename of contents) {\n          // Move item from the from directory to the to directory\n          await this._copy(\n            {\n              from: `${from}/${filename.name}`,\n              to: `${to}/${filename.name}`,\n              directory: fromDirectory,\n              toDirectory,\n            },\n            doRename,\n          );\n        }\n\n        // Optionally remove the original from directory\n        if (doRename) {\n          await this.rmdir({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n      }\n    }\n    return {\n      uri: toPath,\n    };\n  }\n\n  private isBase64String(str: string): boolean {\n    try {\n      return btoa(atob(str)) == str;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\ninterface EntryObj {\n  path: string;\n  folder: string;\n  type: 'directory' | 'file';\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri?: string;\n  content?: string;\n}\n"],"sourceRoot":""}