{"version":3,"sources":["webpack:///../../src/web.ts","webpack:///./node_modules/core-js/modules/es.array.last-index-of.js"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","DB_VERSION","DB_NAME","_writeCmds","undefined","this","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","cmd","args","readFlag","indexOf","initDb","then","conn","tx","transaction","store","objectStore","req","indexName","directory","uriPath","cleanedUriPath","replace","fsPath","clear","options","getPath","dbRequest","entry","Error","data","content","encoding","doRecursive","recursive","occupiedEntry","type","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","uri","btoa","atob","dbIndexRequest","IDBKeyRange","only","entries","depth","match","fullPath","readdir","readDirResult","files","entryPath","name","stat","entryObj","deleteFile","rmdir","all","map","e","subEntry","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","readFile","file","writeFile","writeResult","contents","filename","str","err","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","WebPlugin","$","require","proto","forced"],"mappings":"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","file":"js/chunk-2e7fffed.f331ecd2.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  AppendFileOptions,\n  CopyOptions,\n  CopyResult,\n  DeleteFileOptions,\n  FilesystemPlugin,\n  GetUriOptions,\n  GetUriResult,\n  MkdirOptions,\n  PermissionStatus,\n  ReadFileOptions,\n  ReadFileResult,\n  ReaddirOptions,\n  ReaddirResult,\n  RenameOptions,\n  RmdirOptions,\n  StatOptions,\n  StatResult,\n  WriteFileOptions,\n  WriteFileResult,\n  Directory,\n} from './definitions';\n\nfunction resolve(path: string): string {\n  const posix = path.split('/').filter(item => item !== '.');\n  const newPosix: string[] = [];\n\n  posix.forEach(item => {\n    if (\n      item === '..' &&\n      newPosix.length > 0 &&\n      newPosix[newPosix.length - 1] !== '..'\n    ) {\n      newPosix.pop();\n    } else {\n      newPosix.push(item);\n    }\n  });\n\n  return newPosix.join('/');\n}\nfunction isPathParent(parent: string, children: string): boolean {\n  parent = resolve(parent);\n  children = resolve(children);\n  const pathsA = parent.split('/');\n  const pathsB = children.split('/');\n\n  return (\n    parent !== children &&\n    pathsA.every((value, index) => value === pathsB[index])\n  );\n}\n\nexport class FilesystemWeb extends WebPlugin implements FilesystemPlugin {\n  DB_VERSION = 1;\n  DB_NAME = 'Disc';\n\n  private _writeCmds: string[] = ['add', 'put', 'delete'];\n  private _db?: IDBDatabase;\n  static _debug = true;\n  async initDb(): Promise<IDBDatabase> {\n    if (this._db !== undefined) {\n      return this._db;\n    }\n    if (!('indexedDB' in window)) {\n      throw this.unavailable(\"This browser doesn't support IndexedDB\");\n    }\n\n    return new Promise<IDBDatabase>((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n      request.onupgradeneeded = FilesystemWeb.doUpgrade;\n      request.onsuccess = () => {\n        this._db = request.result;\n        resolve(request.result);\n      };\n      request.onerror = () => reject(request.error);\n      request.onblocked = () => {\n        console.warn('db blocked');\n      };\n    });\n  }\n\n  static doUpgrade(event: IDBVersionChangeEvent): void {\n    const eventTarget = event.target as IDBOpenDBRequest;\n    const db = eventTarget.result;\n    switch (event.oldVersion) {\n      case 0:\n      case 1:\n      default: {\n        if (db.objectStoreNames.contains('FileStorage')) {\n          db.deleteObjectStore('FileStorage');\n        }\n        const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n        store.createIndex('by_folder', 'folder');\n      }\n    }\n  }\n\n  async dbRequest(cmd: string, args: any[]): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: any = tx.objectStore('FileStorage');\n        const req = store[cmd](...args);\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  async dbIndexRequest(\n    indexName: string,\n    cmd: string,\n    args: [any],\n  ): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: IDBObjectStore = tx.objectStore('FileStorage');\n        const index: any = store.index(indexName);\n        const req = index[cmd](...args) as any;\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  private getPath(\n    directory: Directory | undefined,\n    uriPath: string | undefined,\n  ): string {\n    const cleanedUriPath =\n      uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n    let fsPath = '';\n    if (directory !== undefined) fsPath += '/' + directory;\n    if (uriPath !== '') fsPath += '/' + cleanedUriPath;\n    return fsPath;\n  }\n\n  async clear(): Promise<void> {\n    const conn: IDBDatabase = await this.initDb();\n    const tx: IDBTransaction = conn.transaction(['FileStorage'], 'readwrite');\n    const store: IDBObjectStore = tx.objectStore('FileStorage');\n    store.clear();\n  }\n\n  /**\n   * Read a file from disk\n   * @param options options for the file read\n   * @return a promise that resolves with the read file data result\n   */\n  async readFile(options: ReadFileOptions): Promise<ReadFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    // const encoding = options.encoding;\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    return { data: entry.content ? entry.content : '' };\n  }\n\n  /**\n   * Write a file to disk in the specified location on device\n   * @param options options for the file write\n   * @return a promise that resolves with the file write result\n   */\n  async writeFile(options: WriteFileOptions): Promise<WriteFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const doRecursive = options.recursive;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: doRecursive,\n        });\n      }\n    }\n\n    if (!encoding) {\n      data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n      if (!this.isBase64String(data))\n        throw Error('The supplied data is not valid base64 content.');\n    }\n\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: now,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n    return {\n      uri: pathObj.path,\n    };\n  }\n\n  /**\n   * Append to a file on disk in the specified location on device\n   * @param options options for the file append\n   * @return a promise that resolves with the file write result\n   */\n  async appendFile(options: AppendFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const now = Date.now();\n    let ctime = now;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: true,\n        });\n      }\n    }\n\n    if (!encoding && !this.isBase64String(data))\n      throw Error('The supplied data is not valid base64 content.');\n\n    if (occupiedEntry !== undefined) {\n      if (occupiedEntry.content !== undefined && !encoding) {\n        data = btoa(atob(occupiedEntry.content) + atob(data));\n      } else {\n        data = occupiedEntry.content + data;\n      }\n      ctime = occupiedEntry.ctime;\n    }\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: ctime,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Delete a file from disk\n   * @param options options for the file delete\n   * @return a promise that resolves with the deleted file data result\n   */\n  async deleteFile(options: DeleteFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n      IDBKeyRange.only(path),\n    ]);\n    if (entries.length !== 0) throw Error('Folder is not empty.');\n\n    await this.dbRequest('delete', [path]);\n  }\n\n  /**\n   * Create a directory.\n   * @param options options for the mkdir\n   * @return a promise that resolves with the mkdir result\n   */\n  async mkdir(options: MkdirOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    const doRecursive = options.recursive;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const depth = (path.match(/\\//g) || []).length;\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (depth === 1) throw Error('Cannot create Root directory');\n    if (occupiedEntry !== undefined)\n      throw Error('Current directory does already exist.');\n    if (!doRecursive && depth !== 2 && parentEntry === undefined)\n      throw Error('Parent directory must exist');\n\n    if (doRecursive && depth !== 2 && parentEntry === undefined) {\n      const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n      await this.mkdir({\n        path: parentArgPath,\n        directory: options.directory,\n        recursive: doRecursive,\n      });\n    }\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'directory',\n      size: 0,\n      ctime: now,\n      mtime: now,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Remove a directory\n   * @param options the options for the directory remove\n   */\n  async rmdir(options: RmdirOptions): Promise<void> {\n    const { path, directory, recursive } = options;\n    const fullPath: string = this.getPath(directory, path);\n\n    const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n\n    if (entry === undefined) throw Error('Folder does not exist.');\n\n    if (entry.type !== 'directory')\n      throw Error('Requested path is not a directory');\n\n    const readDirResult = await this.readdir({ path, directory });\n\n    if (readDirResult.files.length !== 0 && !recursive)\n      throw Error('Folder is not empty');\n\n    for (const entry of readDirResult.files) {\n      const entryPath = `${path}/${entry.name}`;\n      const entryObj = await this.stat({ path: entryPath, directory });\n      if (entryObj.type === 'file') {\n        await this.deleteFile({ path: entryPath, directory });\n      } else {\n        await this.rmdir({ path: entryPath, directory, recursive });\n      }\n    }\n\n    await this.dbRequest('delete', [fullPath]);\n  }\n\n  /**\n   * Return a list of files from the directory (not recursive)\n   * @param options the options for the readdir operation\n   * @return a promise that resolves with the readdir directory listing result\n   */\n  async readdir(options: ReaddirOptions): Promise<ReaddirResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (options.path !== '' && entry === undefined)\n      throw Error('Folder does not exist.');\n\n    const entries: string[] = await this.dbIndexRequest(\n      'by_folder',\n      'getAllKeys',\n      [IDBKeyRange.only(path)],\n    );\n    const files = await Promise.all(\n      entries.map(async e => {\n        let subEntry = (await this.dbRequest('get', [e])) as EntryObj;\n        if (subEntry === undefined) {\n          subEntry = (await this.dbRequest('get', [e + '/'])) as EntryObj;\n        }\n        return {\n          name: e.substring(path.length + 1),\n          type: subEntry.type,\n          size: subEntry.size,\n          ctime: subEntry.ctime,\n          mtime: subEntry.mtime,\n          uri: subEntry.path,\n        };\n      }),\n    );\n    return { files: files };\n  }\n\n  /**\n   * Return full File URI for a path and directory\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async getUri(options: GetUriOptions): Promise<GetUriResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    return {\n      uri: entry?.path || path,\n    };\n  }\n\n  /**\n   * Return data about a file\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async stat(options: StatOptions): Promise<StatResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    if (entry === undefined) throw Error('Entry does not exist.');\n\n    return {\n      type: entry.type,\n      size: entry.size,\n      ctime: entry.ctime,\n      mtime: entry.mtime,\n      uri: entry.path,\n    };\n  }\n\n  /**\n   * Rename a file or directory\n   * @param options the options for the rename operation\n   * @return a promise that resolves with the rename result\n   */\n  async rename(options: RenameOptions): Promise<void> {\n    await this._copy(options, true);\n    return;\n  }\n\n  /**\n   * Copy a file or directory\n   * @param options the options for the copy operation\n   * @return a promise that resolves with the copy result\n   */\n  async copy(options: CopyOptions): Promise<CopyResult> {\n    return this._copy(options, false);\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  /**\n   * Function that can perform a copy or a rename\n   * @param options the options for the rename operation\n   * @param doRename whether to perform a rename or copy operation\n   * @return a promise that resolves with the result\n   */\n  private async _copy(\n    options: CopyOptions,\n    doRename = false,\n  ): Promise<CopyResult> {\n    let { toDirectory } = options;\n    const { to, from, directory: fromDirectory } = options;\n\n    if (!to || !from) {\n      throw Error('Both to and from must be provided');\n    }\n\n    // If no \"to\" directory is provided, use the \"from\" directory\n    if (!toDirectory) {\n      toDirectory = fromDirectory;\n    }\n\n    const fromPath = this.getPath(fromDirectory, from);\n    const toPath = this.getPath(toDirectory, to);\n\n    // Test that the \"to\" and \"from\" locations are different\n    if (fromPath === toPath) {\n      return {\n        uri: toPath,\n      };\n    }\n\n    if (isPathParent(fromPath, toPath)) {\n      throw Error('To path cannot contain the from path');\n    }\n\n    // Check the state of the \"to\" location\n    let toObj;\n    try {\n      toObj = await this.stat({\n        path: to,\n        directory: toDirectory,\n      });\n    } catch (e) {\n      // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n      const toPathComponents = to.split('/');\n      toPathComponents.pop();\n      const toPath = toPathComponents.join('/');\n\n      // Check the containing directory of the \"to\" location exists\n      if (toPathComponents.length > 0) {\n        const toParentDirectory = await this.stat({\n          path: toPath,\n          directory: toDirectory,\n        });\n\n        if (toParentDirectory.type !== 'directory') {\n          throw new Error('Parent directory of the to path is a file');\n        }\n      }\n    }\n\n    // Cannot overwrite a directory\n    if (toObj && toObj.type === 'directory') {\n      throw new Error('Cannot overwrite a directory with a file');\n    }\n\n    // Ensure the \"from\" object exists\n    const fromObj = await this.stat({\n      path: from,\n      directory: fromDirectory,\n    });\n\n    // Set the mtime/ctime of the supplied path\n    const updateTime = async (path: string, ctime: number, mtime: number) => {\n      const fullPath: string = this.getPath(toDirectory, path);\n      const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n      entry.ctime = ctime;\n      entry.mtime = mtime;\n      await this.dbRequest('put', [entry]);\n    };\n\n    const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n\n    switch (fromObj.type) {\n      // The \"from\" object is a file\n      case 'file': {\n        // Read the file\n        const file = await this.readFile({\n          path: from,\n          directory: fromDirectory,\n        });\n\n        // Optionally remove the file\n        if (doRename) {\n          await this.deleteFile({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n\n        // Write the file to the new location\n        const writeResult = await this.writeFile({\n          path: to,\n          directory: toDirectory,\n          data: file.data,\n        });\n\n        // Copy the mtime/ctime of a renamed file\n        if (doRename) {\n          await updateTime(to, ctime, fromObj.mtime);\n        }\n\n        // Resolve promise\n        return writeResult;\n      }\n      case 'directory': {\n        if (toObj) {\n          throw Error('Cannot move a directory over an existing object');\n        }\n\n        try {\n          // Create the to directory\n          await this.mkdir({\n            path: to,\n            directory: toDirectory,\n            recursive: false,\n          });\n\n          // Copy the mtime/ctime of a renamed directory\n          if (doRename) {\n            await updateTime(to, ctime, fromObj.mtime);\n          }\n        } catch (e) {\n          // ignore\n        }\n\n        // Iterate over the contents of the from location\n        const contents = (\n          await this.readdir({\n            path: from,\n            directory: fromDirectory,\n          })\n        ).files;\n\n        for (const filename of contents) {\n          // Move item from the from directory to the to directory\n          await this._copy(\n            {\n              from: `${from}/${filename}`,\n              to: `${to}/${filename}`,\n              directory: fromDirectory,\n              toDirectory,\n            },\n            doRename,\n          );\n        }\n\n        // Optionally remove the original from directory\n        if (doRename) {\n          await this.rmdir({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n      }\n    }\n    return {\n      uri: toPath,\n    };\n  }\n\n  private isBase64String(str: string): boolean {\n    try {\n      return btoa(atob(str)) == str;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\ninterface EntryObj {\n  path: string;\n  folder: string;\n  type: 'directory' | 'file';\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri?: string;\n  content?: string;\n}\n","var $ = require('../internals/export');\nvar lastIndexOf = require('../internals/array-last-index-of');\n\n// `Array.prototype.lastIndexOf` method\n// https://tc39.es/ecma262/#sec-array.prototype.lastindexof\n// eslint-disable-next-line es/no-array-prototype-lastindexof -- required for testing\n$({ target: 'Array', proto: true, forced: lastIndexOf !== [].lastIndexOf }, {\n  lastIndexOf: lastIndexOf\n});\n"],"sourceRoot":""}